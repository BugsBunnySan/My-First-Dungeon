-- This file has been generated by Dungeon Editor 2.2.4

defineObject{
	name = "cannon_daemon_pilot_light",
	components = {
		{
			class = "Light",
			offset = vec(0, 0.4, 0),
			range = 0,
			color = math.saturation(vec(1, 0.5, 0.1), 0.8),
			brightness = 0,
			castShadow = true,
			shadowMapSize = 64,
			staticShadows = true,
			staticShadowDistance = 0,	-- use static shadows always
			onInit = function(self)
				-- optimization: disable casting light towards -Y
				self:setClipDistance(3, 0)
			end,
			onUpdate = function(self)
				local noise = math.noise(Time.currentTime()*3 + 123) * .5 + .9
				self:setBrightness(noise * 10)
			end,
		},
		{
			class = "Particle",
            name = "leftTorch",
			particleSystem = "torch",
			offset = vec(-0.25, 1.5, 0.25),
		},
		{
			class = "Particle",
            name = "rightTorch",
			particleSystem = "torch",
			offset = vec(0.25, 1.5, 0.25),
		},
		{
			class = "Controller",
			onActivate = function(self)
				self.go.light:enable()
				self.go.leftTorch:enable()
				self.go.rightTorch:enable()
			end,
			onDeactivate = function(self)
				self.go.light:disable()
				self.go.leftTorch:disable()
				self.go.rightTorch:disable()
			end,
			onToggle = function(self)
				if self.go.light:isEnabled() then
					self.go.light:disable()
                    self.go.leftTorch:disable()
                    self.go.rightTorch:disable()
				else
					self.go.light:enable()
                    self.go.leftTorch:enable()
                    self.go.rightTorch:enable()
				end
			end,
		},
	},
	placement = "wall",
	editorIcon = 88,
}

defineObject{
    name = "cannon_daemon",
    baseObject = "ratling_boss",
    components = {
        {
            class = "RatlingBossBrain",
            name = "brain",
            allAroundSight = true,
            onThink = function(self)
                return nil
            end,
        },
		{
			class = "MonsterAction",
			name = "alert",
			cooldown = 1000,
			animation = "alert",
			sound = "cannon_daemon_alert",
            onBeginAction = function(self) 
                self.go.muzzleFlash:restart()
                self.go.muzzleFlashLight:enable()
                self.go.muzzleFlashLight:fadeIn(0.5)
                self.go.muzzleFlashLight:fadeOut(2.5)  
            end,
		},		
        { -- repeatable alert action with low cooldown
			class = "MonsterAction",
			name = "manualAlert",
			cooldown = 2,
			animation = "alert",
			sound = "cannon_daemon_alert",
            onBeginAction = function(self) 
                self.go.muzzleFlash:restart()
                self.go.muzzleFlashLight:enable()
                self.go.muzzleFlashLight:fadeIn(0.5)
                self.go.muzzleFlashLight:fadeOut(2.5)  
            end,
		},		
        {
			class = "MonsterAttack",
			name = "rangedAttack",
			attackType = "firearm",
			attackPower = 900,
			pierce = 20,
			accuracy = 100,
			woundChance = 60,
			cooldown = 3,
			sound = "ratling_boss_attack",
			knockback = true,
			screenEffect = "damage_screen",
			cameraShake = true,
			onAttack = function(self)
				self.go.muzzleFlash:restart()
				self.go.muzzleFlashLight:enable()
				self.go.muzzleFlashLight:fadeIn(0)
				self.go.muzzleFlashLight:fadeOut(0.2)
                local facing = self.go.facing
                local from_x = self.go.x
                local from_y = self.go.y
                if facing == 0 then -- north
                    from_x = self.go.x
                    from_y = self.go.y-1
                elseif facing == 1 then -- east
                    from_x = self.go.x+1
                    from_y = self.go.y
                elseif facing == 2 then -- south
                    from_x = self.go.x
                    from_y = self.go.y+1
                elseif facing == 3 then -- west
                    from_x = self.go.x-1
                    from_y = self.go.y
                end
                spawn("fireburst", self.go.level, from_x, from_y, facing, self.go.elevation) 
			end,
		},
    },
}

defineSound{
	name = "cannon_daemon_alert",
	filename = "mod_assets/sounds/light-fuse.wav",
	loop = false,
	volume = 1,
	minDistance = 5,
	maxDistance = 12,
}